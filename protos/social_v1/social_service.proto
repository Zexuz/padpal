syntax = "proto3";

option csharp_namespace = "Padel.Proto.Social.V1";

option go_package = "github.com/mkdir-sweden/padpal/gateway/protos/socialpb";

import "google/protobuf/descriptor.proto";
import "descriptors/rule.proto";

package social.v1;

message ChatMessageReceived{
  option (descriptors.messageType) = "social_v1_ChatMessageReceived";
  string roomId = 1;
  repeated int32 participants = 2;
  //  repeated Message messages = 3;
}

message FriendRequestReceived{
  option (descriptors.messageType) = "social_v1_FriendRequestReceived";
  int32 toUser = 1;
  User fromUser = 2;

  message User{
    int32 id = 1;
    string name = 2;
  }
}

message FriendRequestAccepted{
  option (descriptors.messageType) = "social_v1_FriendRequestAccepted";
  string userThatAccepted = 1;
  int32 userThatRequested = 2;
}

service Social {
  // TODO how to mark in the app what rooms have "unread messages" for me?
  // if Chatroom.lastActivity is newer than ChatRoom.participants.me.lastSeen, then this should be marked as "new" 
  rpc SendMessage (SendMessageRequest) returns (SendMessageResponse) {
    option (descriptors.authorization) = {
      shouldValidate:true,
    };
  }
  rpc CreateRoom (CreateRoomRequest) returns (CreateRoomResponse) {
    option (descriptors.authorization) = {
      shouldValidate:true,
    };
  }
  rpc GetRoomsWhereUserIsParticipating (GetRoomsWhereUserIsParticipatingRequest) returns (GetRoomsWhereUserIsParticipatingResponse) {
    option (descriptors.authorization) = {
      shouldValidate:true,
    };
  }
  rpc GetRoom (GetRoomRequest) returns (GetRoomResponse) {
    option (descriptors.authorization) = {
      shouldValidate:true,
    };
  }

  rpc SearchForProfile (SearchForProfileRequest) returns (SearchForProfileResponse) {
    option (descriptors.authorization) = {
      shouldValidate:true,
    };
  }
  rpc SendFriendRequest (SendFriendRequestRequest) returns (SendFriendRequestResponse) {
    option (descriptors.authorization) = {
      shouldValidate:true,
    };
  }
  rpc RespondToFriendRequest (RespondToFriendRequestRequest) returns (RespondToFriendRequestResponse) {
    option (descriptors.authorization) = {
      shouldValidate:true,
    };
  }
}
// TODO user should get a notification when a friendRequest is created, and when a friendRequest is accpected
// TODO implement method to get my profile. MyProfile (the object) might be different than the SearchForProfile message  

message RespondToFriendRequestRequest {
  int32 userId = 1; // The user that requests we be friends
  Action action = 2;

  enum Action{
    UNKNOWN = 0;
    ACCEPT = 1;
    DECLINE = 2;
  }
}

message RespondToFriendRequestResponse {
}

message SendFriendRequestRequest {
  int32 userId = 1; // The user that I want to befriend
  // Todo, expand to also have to option to send a message
}

message SendFriendRequestResponse {
}

message SearchForProfileRequest {
  string searchTerm = 1;
}

message SearchForProfileResponse {
  repeated Profile profiles = 1;
}

message Profile{
  string name = 1;
}

message SendMessageRequest {
  string roomId = 1;
  string content = 2;
}

message SendMessageResponse {
}

message CreateRoomRequest {
  string content = 1;
  repeated int32 participants = 2;
}

message CreateRoomResponse {
  string roomId = 1;
}

message GetRoomsWhereUserIsParticipatingRequest {

}

message GetRoomsWhereUserIsParticipatingResponse {
  repeated string roomIds = 1;
}

message GetRoomRequest {
  string roomId = 1;
}

message GetRoomResponse {
  ChatRoom room = 1;
}


message ChatRoom{
  string id = 1;
  int32 admin = 2;
  repeated int32 participants = 3;
  repeated Message messages = 4;
}


message GetMessagesRequest {
  int64 afterTimestamp = 1;
}

message GetMessagesResponse {
  repeated Message messages = 1;
}

message Message{
  string content = 1;
  int32 author = 2;
  int64 utcTimestamp = 3;
}
