syntax = "proto3";

option csharp_namespace = "Padel.Proto.Game.V1";

option go_package = "github.com/mkdir-sweden/padpal/gateway/protos/gamepb";

import "descriptors/rule.proto";
import "common_v1/models.proto";

package game.v1;

message GameCreated{
  option (descriptors.messageType) = "game_v1_GameCreated";
  PublicGameInfo publicGameInfo = 1;
  repeated int32 invited_players = 2;
}

message UserRequestedToJoinGame{
  option (descriptors.messageType) = "game_v1_UserRequestedToJoinGame";
  string gameId = 1;
  common.v1.User user = 2;
}

service Game {
  rpc CreateGame (CreateGameRequest) returns (CreateGameResponse) {
    option (descriptors.authorization) = {
      shouldValidate:true,
    };
  }
  rpc FindGames (FindGamesRequest) returns (FindGamesResponse) {
    // We might not need this?
    option (descriptors.authorization) = {
      shouldValidate:true,
    };
  }
  rpc RequestToJoinGame (RequestToJoinGameRequest) returns (RequestToJoinGameResponse) {
    option (descriptors.authorization) = {
      shouldValidate:true,
    };
  }
}

message RequestToJoinGameRequest {
  string id = 1;
}

message RequestToJoinGameResponse {

}

message GameFilter{
  Point center = 1;
  int32 distance = 2;
  TimeOffset timeOffset = 3;

  message TimeOffset{
    int64 start = 1; // Unix time in seconds
    int64 end = 2; // Unix time in seconds
  }
}

message FindGamesRequest {
  GameFilter filter = 1;
}

message FindGamesResponse {
  repeated PublicGameInfo games = 1;
}

message PublicGameInfo{
  string id = 1;
  PadelCenter location = 2;
  int64 start_time = 3;
  int32 duration_in_minutes = 4;
  int32 price_per_person = 5;
  CourtType court_type = 6;
  common.v1.User creator = 7;
  repeated common.v1.User playerRequestedToJoin = 8;
}

// Should not be public to players that are not in this game.
message PrivateGameInfo{
  string courtName = 1;
  string additional_information = 2;
}

enum CourtType{
  UNKNOWN = 0;
  INDOORS = 1;
  OUTDOORS = 2;
}

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
  double latitude = 1;
  double longitude = 2;
}

message PadelCenter{
  string name = 1;
  Point point = 2;
}

message CreateGameRequest {
  PadelCenter location = 1;
  int64 start_time = 2;
  int32 duration_in_minutes = 3;
  int32 price_per_person = 4;
  CourtType court_type = 5;
  common.v1.User Creator = 6;
  string courtName = 7;
  string additional_information = 8;
  repeated int32 players_to_invite = 9;
}

message CreateGameResponse {
  string id = 1;
}
  

